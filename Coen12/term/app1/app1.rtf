{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww26660\viewh7380\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Big O Times\
\
createDataSet O(n)\
destroyDataSet O(n)\
searchAge O(n)\
insertion O(n)\
deletion O(n)\
maxageGap O(1)\
\
I made a lot of assumptions, and based off of those assumptions my code is optimized for runtime. I do understand it consumes a large block of memory, but this was not the assignment.\
My createData set is based off of the given age parameters, can be expanded easily if the age parameters were different. I chose an array, as an array can easily sort ID's based off of age set, at the expense of memory.\
My destroyDataSet uses a counter to verify that all values have been destroyed. This changes the runtime, but if I did not have to actually clear the individual spaces in the array the run time could be easily modified to O(1).\
searchAge prints all of the IDs in an age set. If what I needed to print was just the number of elements, or a check if there are any elements in that age group the runtime could also be O(1).\
Insertion is O(n). Since the assignment says insertions are infrequent, this is fine.\
Deletion is O(n) as the assignment implies that all ID's in an age group should be deleted. Could be modified to O(1) if there is no need for a count.\
maxAgeGap relies on global variables, and checks in the insert and delete functions. O(1)}